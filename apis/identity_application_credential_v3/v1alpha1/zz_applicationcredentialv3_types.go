/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessRulesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessRulesParameters struct {

	// +kubebuilder:validation:Required
	Method *string `json:"method" tf:"method,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type ApplicationCredentialV3Observation struct {

	// +kubebuilder:validation:Optional
	AccessRules []AccessRulesObservation `json:"accessRules,omitempty" tf:"access_rules,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ApplicationCredentialV3Parameters struct {

	// +kubebuilder:validation:Optional
	AccessRules []AccessRulesParameters `json:"accessRules,omitempty" tf:"access_rules,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Unrestricted *bool `json:"unrestricted,omitempty" tf:"unrestricted,omitempty"`
}

// ApplicationCredentialV3Spec defines the desired state of ApplicationCredentialV3
type ApplicationCredentialV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationCredentialV3Parameters `json:"forProvider"`
}

// ApplicationCredentialV3Status defines the observed state of ApplicationCredentialV3.
type ApplicationCredentialV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationCredentialV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationCredentialV3 is the Schema for the ApplicationCredentialV3s API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type ApplicationCredentialV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationCredentialV3Spec   `json:"spec"`
	Status            ApplicationCredentialV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationCredentialV3List contains a list of ApplicationCredentialV3s
type ApplicationCredentialV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationCredentialV3 `json:"items"`
}

// Repository type metadata.
var (
	ApplicationCredentialV3_Kind             = "ApplicationCredentialV3"
	ApplicationCredentialV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationCredentialV3_Kind}.String()
	ApplicationCredentialV3_KindAPIVersion   = ApplicationCredentialV3_Kind + "." + CRDGroupVersion.String()
	ApplicationCredentialV3_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationCredentialV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationCredentialV3{}, &ApplicationCredentialV3List{})
}
